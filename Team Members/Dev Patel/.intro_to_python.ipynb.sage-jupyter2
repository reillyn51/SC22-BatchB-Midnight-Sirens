{"backend_state":"running","connection_file":"/projects/07cb54a4-9729-4508-ad4f-95fc7891551c/.local/share/jupyter/runtime/kernel-f76c4718-8906-4cc5-8819-d8cad754aa12.json","kernel":"cv_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"intro_to_python_new.ipynb","provenance":[]},"interpreter":{"hash":"08210294964727e4010dccc398c44f22b92a2e77e2aceea574ad21eae77cd8e8"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"orig_nbformat":4},"trust":true,"type":"settings"}
{"cell_type":"code","end":1656350778799,"exec_count":5,"id":"433d6e","input":"def take_two(a, b):\n    return a*b > 0\n\nprint(take_two(-9, 8))","kernel":"python3-ubuntu","metadata":{"id":"ISzO6E8EQPSR"},"output":{"0":{"name":"stdout","text":"False\n"}},"pos":67,"start":1656350778786,"state":"done","type":"cell"}
{"cell_type":"code","end":1656350881202,"exec_count":8,"id":"880e6d","input":"def print_list(n_inp):\n    for i in n_inp:\n        print(i)\nprint_list(['Okay', 'Yes', 'No'])","kernel":"python3-ubuntu","metadata":{"id":"k2IxEL5GQPSS"},"output":{"0":{"name":"stdout","text":"Okay\nYes\nNo\n"}},"pos":71,"start":1656350881180,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351689848,"exec_count":12,"id":"38acb3","input":"my_array = np.zeros((2,3)) # (2,3) is the shape of the array\nmy_array","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hL0rMwfGQPSS","outputId":"c2c570e9-0ce3-4acf-d688-113df7ebaf0c"},"output":{"0":{"data":{"text/plain":"array([[0., 0., 0.],\n       [0., 0., 0.]])"},"exec_count":12}},"pos":78,"start":1656351689842,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351694357,"exec_count":13,"id":"8fa9f9","input":"my_array -= 3\nprint(my_array)","kernel":"python3-ubuntu","metadata":{"id":"U8XkZZwXQPST"},"output":{"0":{"name":"stdout","text":"[[-3. -3. -3.]\n [-3. -3. -3.]]\n"}},"pos":84,"start":1656351694344,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351864649,"exec_count":15,"id":"fed73f","input":"a = 1\nb = 2\nc = 3\na # when you put a variable by itself, its value will be printed (This is a comment - anything after a # on the same line will be ignored)","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lYt96PjpQPSA","outputId":"4820a63e-5f46-4dda-c0bb-d132a09f3980"},"output":{"0":{"data":{"text/plain":"1"},"exec_count":15}},"pos":4,"start":1656351864627,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874283,"exec_count":16,"id":"35a054","input":"d = a + b\nd","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jXIckzv2QPSC","outputId":"f29fafeb-51cc-4261-fb32-fe1a8b28c13c"},"output":{"0":{"data":{"text/plain":"3"},"exec_count":16}},"pos":6,"start":1656351874259,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874330,"exec_count":17,"id":"c79002","input":"e = c - a\ne","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H0WW61KRQPSD","outputId":"1a936cc3-0156-46bc-bfec-c7194d30aeb2"},"output":{"0":{"data":{"text/plain":"2"},"exec_count":17}},"pos":7,"start":1656351874315,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874453,"exec_count":18,"id":"0c8595","input":"f = b * c\nf","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wIzGAkkWQPSD","outputId":"9c19e7dd-a611-42c2-9fe7-be74dc5f6c7a"},"output":{"0":{"data":{"text/plain":"6"},"exec_count":18}},"pos":8,"start":1656351874379,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874469,"exec_count":19,"id":"e7fed9","input":"g = a / b\ng","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GOaoeDtAQPSE","outputId":"bcb07a69-6491-4f26-f21d-45805264437f"},"output":{"0":{"data":{"text/plain":"0.5"},"exec_count":19}},"pos":9,"start":1656351874461,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874549,"exec_count":20,"id":"0a4b59","input":"g = g*2 # the same thing works for /, +, and -\ng","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1nDLTWcpQPSF","outputId":"548902ab-03ee-4750-9aab-101ac788bf2b"},"output":{"0":{"data":{"text/plain":"1.0"},"exec_count":20}},"pos":11,"start":1656351874526,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874572,"exec_count":21,"id":"31a126","input":"f/=2 # there is also +=, -=, and *=\nf","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mp0kRwWzQPSG","outputId":"1714facc-05ca-41da-a3be-0c304058be18"},"output":{"0":{"data":{"text/plain":"3.0"},"exec_count":21}},"pos":13,"start":1656351874570,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874582,"exec_count":22,"id":"9b2f4f","input":"my_list = [1, 2, 3, 4, 5]","kernel":"python3-ubuntu","metadata":{"id":"Z7Kr_5ghQPSI"},"pos":24,"start":1656351874576,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874596,"exec_count":23,"id":"52aa49","input":"my_list[2] # here, 2 is the index you are accessing","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y1ii3jWLQPSJ","outputId":"96550428-16e8-4f84-e7ee-f743f8af0127"},"output":{"0":{"data":{"text/plain":"3"},"exec_count":23}},"pos":26,"start":1656351874585,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874616,"exec_count":24,"id":"08fbf4","input":"print(my_list[0], my_list[1], my_list[2], my_list[3], my_list[4])","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"mBa3oPUMQPSK","outputId":"0ab14bb0-fbf4-4adc-c0a1-7ddba8d4a19b"},"output":{"0":{"name":"stdout","text":"1 2 3 4 5\n"}},"pos":28,"start":1656351874615,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874633,"exec_count":25,"id":"87c4f7","input":"for number in my_list:\n  print(number)","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dwcVU8rCQPSM","outputId":"19fb28c7-c26e-4eb0-a298-b692b86e8d06"},"output":{"0":{"name":"stdout","text":"1\n2\n3\n4\n5\n"}},"pos":35,"start":1656351874625,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874644,"exec_count":26,"id":"88343c","input":"for i in range(5): # range functions the same here as the list [0,1,2,3,4,5]\n    print('i = ', i)","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1WDJw-zLQPSN","outputId":"64cc601f-8ed7-4213-d44d-1853b53b1b86"},"output":{"0":{"name":"stdout","text":"i =  0\ni =  1\ni =  2\ni =  3\ni =  4\n"}},"pos":37,"start":1656351874639,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874655,"exec_count":27,"id":"683f26","input":"i = 0\nwhile i < 5:\n    print(\"Hello World\")\n    i = i + 1","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j2OvkKqWQPSN","outputId":"e097da35-32f2-43f3-805e-52aac26f7abd"},"output":{"0":{"name":"stdout","text":"Hello World\nHello World\nHello World\nHello World\nHello World\n"}},"pos":40,"start":1656351874653,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874663,"exec_count":28,"id":"408124","input":"a = 1\nb = 2\nif a > b:\n    print(\"a is greater than b\")","kernel":"python3-ubuntu","metadata":{"id":"K7aHB-OdQPSN"},"pos":42,"start":1656351874659,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874675,"exec_count":29,"id":"7c2df4","input":"a = 1\nb = 2\nif a > b:\n    print(\"a is greater than b\")\nelse:\n    print(\"b is less than a\")","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mzeHNJjtQPSO","outputId":"c0bcfd00-f8ae-484c-d1ae-c67130d8d7b2"},"output":{"0":{"name":"stdout","text":"b is less than a\n"}},"pos":44,"start":1656351874671,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351874691,"exec_count":30,"id":"ef9470","input":"a = 1\nb = 1\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a equals b\")\nelse:\n    print(\"b is less than a\")","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KqnXKM2fQPSO","outputId":"0e6b4490-1b02-40d0-db5e-aafb906e31b9"},"output":{"0":{"name":"stdout","text":"a equals b\n"}},"pos":46,"start":1656351874690,"state":"done","type":"cell"}
{"cell_type":"code","end":1656351903674,"exec_count":31,"id":"49b818","input":"import numpy as np","kernel":"python3-ubuntu","metadata":{"id":"3DvgKoTLQPSS"},"pos":76,"start":1656351903663,"state":"done","type":"cell"}
{"cell_type":"code","end":1656353005642,"exec_count":1,"id":"195154","input":"import cv2\nfrom skimage import io\nfrom google.colab.patches import cv2_imshow","kernel":"cv_env","metadata":{"id":"4Yt9kYPsRsex"},"output":{"0":{"name":"stderr","text":"/projects/07cb54a4-9729-4508-ad4f-95fc7891551c/miniconda3/envs/cv_env/lib/python3.8/site-packages/skimage/io/manage_plugins.py:23: UserWarning: Your installed pillow version is < 8.1.2. Several security issues (CVE-2021-27921, CVE-2021-25290, CVE-2021-25291, CVE-2021-25293, and more) have been fixed in pillow 8.1.2 or higher. We recommend to upgrade this library.\n  from .collection import imread_collection_wrapper\n"},"1":{"name":"stderr","text":"/projects/07cb54a4-9729-4508-ad4f-95fc7891551c/miniconda3/envs/cv_env/lib/python3.8/site-packages/google/colab/data_table.py:30: UserWarning: IPython.utils.traitlets has moved to a top-level traitlets package.\n  from IPython.utils import traitlets as _traitlets\n"}},"pos":86,"start":1656353003091,"state":"done","type":"cell"}
{"cell_type":"code","end":1656353360762,"exec_count":3,"id":"618937","input":"url = \"https://www.akc.org/wp-content/uploads/2017/11/GettyImages-187066830.jpg\"","kernel":"cv_env","metadata":{"id":"6cFGy-7XSDkD"},"pos":88,"start":1656353360732,"state":"done","type":"cell"}
{"cell_type":"code","end":1656353485082,"exec_count":15,"id":"ff6c98","input":"img = cv2.cvtColor(io.imread(url), cv2.COLOR_RGB2BGR)\ncv2_imshow(img)","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":529},"id":"Y5pacxDTSHI4","outputId":"c49492f9-3c29-49d8-e32d-3ec5c8b6c5b2"},"output":{"0":{"data":{"image/png":"fc63b9a2331cac38770bab0cc558424716f4ed4a","text/plain":"<PIL.Image.Image image mode=RGB size=768x512 at 0x7F6A88F6EDF0>"}}},"pos":90,"start":1656353484763,"state":"done","type":"cell"}
{"cell_type":"code","end":1656353487825,"exec_count":16,"id":"c2f9f0","input":"img = cv2.resize(img, (180, 100))\ncv2_imshow(img)","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"mlFtREL5SqOf","outputId":"3b313407-d6f4-4f9d-b59d-eef18721b7d5"},"output":{"0":{"data":{"image/png":"5e391e5840ab52c82a5a4aa681ab3c624b1f8e52","text/plain":"<PIL.Image.Image image mode=RGB size=180x100 at 0x7F6A898CCFA0>"}}},"pos":92,"start":1656353487793,"state":"done","type":"cell"}
{"cell_type":"code","end":1656353704829,"exec_count":24,"id":"595f41","input":"b, g, r = cv2.split(img)\n# fill other non-blue channels with zeros to achieve all blues\nzeros_ch = np.zeros(img.shape[0:2], dtype=\"uint8\")\nblue_img = cv2.merge([b, zeros_ch, zeros_ch])\ncv2_imshow(blue_img)","kernel":"cv_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"2kGkRWP9S31H","outputId":"a44a57b2-0fa3-43e5-80bd-b2c8466e2407"},"output":{"0":{"data":{"image/png":"2e21aaeeb035953e18fb5d176384240e3bd124ff","text/plain":"<PIL.Image.Image image mode=RGB size=180x100 at 0x7F6A886DFFA0>"}}},"pos":94,"start":1656353704789,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1e3cdc","input":"import random\nrandom.randint(0,5) # this gives one of the numbers between and including 0 and 5","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SQyvSt0CQPSY","outputId":"13339029-f606-4ede-d0b4-87751d658c12"},"output":{"0":{"data":{"text/plain":"1"},"execution_count":0,"metadata":{},"output_type":"execute_result"}},"pos":106,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"248f81","input":"","metadata":{"id":"-GtaLCXYQPSY"},"pos":108,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2c3e4d","input":"out = add_numbers(1, 2, 3)\nout","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iB4Vf2jcQPSR","outputId":"fd3b4732-928e-4120-f13c-17599e818c37"},"output":{"0":{"data":{"text/plain":"6"},"execution_count":0,"metadata":{},"output_type":"execute_result"}},"pos":64,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3204cb","input":"","metadata":{"id":"fmuVGS97QPSP"},"pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"543931","input":"add_numbers(1, 2, 3)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hCzjHwmQQPSQ","outputId":"d7d5c314-cb20-464d-977b-e709b0fa174e"},"output":{"0":{"name":"stdout","output_type":"stream","text":"6\n"}},"pos":61,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"562dd2","input":"my_first_function()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bUc2IWbKQPSQ","outputId":"7b42c258-650a-463a-8279-3e7f7bd3c2c7"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Hello world\n"}},"pos":57,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6af6c7","input":"def add_numbers(a, b, c):\n    total = a + b + c\n    print(total)","metadata":{"id":"vdvERGqhQPSQ"},"pos":60,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"78d560","input":"","metadata":{"id":"vE3I6c9lTfUw"},"pos":101,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"801ddd","input":"def my_first_function():\n    print('Hello world')","metadata":{"id":"1d-Rq_JjQPSQ"},"pos":56,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8376a3","input":"import time\ntime.time() # you will see this go up as you rerun it","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pt3_2jHFQPSY","outputId":"c0b02164-354d-49be-e965-d33c0c806e58"},"output":{"0":{"data":{"text/plain":"1655747907.4349885"},"execution_count":0,"metadata":{},"output_type":"execute_result"}},"pos":104,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8cd72a","input":"from random import randint\nrandint(0,5) # now we can exclude the random. prefix","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ddsrumBjQPSY","outputId":"5871db5c-53ab-4945-8a53-38a0ae8d20c5"},"output":{"0":{"data":{"text/plain":"4"},"execution_count":0,"metadata":{},"output_type":"execute_result"}},"pos":110,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"90d411","input":"","metadata":{"id":"KkvmLPPIRC3s"},"pos":113,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9289b3","input":"","metadata":{"id":"x7wxxa0_Tf1S"},"pos":100,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"98f7b5","input":"from time import time as t\nt()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QGbFdUSTQPSZ","outputId":"1b5cf26f-ef9f-4d2d-c29d-eba33b097961"},"output":{"0":{"data":{"text/plain":"1655747915.1418505"},"execution_count":0,"metadata":{},"output_type":"execute_result"}},"pos":112,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b97225","input":"def add_numbers(a, b, c):\n    total = a + b + c\n    return total","metadata":{"id":"uLcQ-es8QPSR"},"pos":63,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e13fa0","input":"","metadata":{"id":"KU1Mi35PTf_y"},"pos":99,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"fd695f","input":"cv2_imshow(blue_img)\ncv2_imshow(cv2.rotate(blue_img, 0)) # rotate clockwise 90 degrees","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":377},"id":"oq4rqLRiTOSu","outputId":"4a156802-a24a-419d-e622-2b5f33bbd364"},"output":{"0":{"data":{"image/png":"\n","text/plain":"<PIL.Image.Image image mode=RGB size=180x180 at 0x7FC09F82C090>"},"metadata":{},"output_type":"display_data"},"1":{"data":{"image/png":"\n","text/plain":"<PIL.Image.Image image mode=RGB size=180x180 at 0x7FC09F82C2D0>"},"metadata":{},"output_type":"display_data"}},"pos":96,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"ac28a3","input":"import numpy as np\nprint(img.shape[0:2])\nzero_channel = np.zeros((100, 180))\nprint(zero_channel)\nzero_channel = np.zeros((100, 180), dtype=\"uint8\")\nprint(zero_channel) #opencv only takes integers\n\n\n\nb, g, r = cv2.split(img)\nmg = cv2.merge([zero_channel, zero_channel, r])\ncv2_imshow(mg)","kernel":"cv_env","metadata":{"id":"8Ay58KUqTejo"},"output":{"0":{"name":"stdout","text":"(100, 180)\n[[0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]\n[[0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n ...\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]\n [0 0 0 ... 0 0 0]]\n"},"1":{"data":{"image/png":"b7dd1b20b846a804716ded274c00096262c3b67b","text/plain":"<PIL.Image.Image image mode=RGB size=180x100 at 0x7F6A8845AE80>"}}},"pos":98,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"cf6dd8","input":"np.random.rand(3,2) # we don't need to put the shape in braces this time","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AI-2_3UFQPST","outputId":"1daf097c-f701-49ac-95b2-89af11bcadfa"},"output":{"0":{"data":{"text/plain":"array([[0.04912864, 0.60777123],\n       [0.5187959 , 0.35016874],\n       [0.36002124, 0.94697975]])"},"execution_count":3,"metadata":{},"output_type":"execute_result"}},"pos":80,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9e8148","input":"my_array2 = my_array + 1\nmy_array3 = my_array2 * 2\nmy_array2, my_array3","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6tsG7vi7QPST","outputId":"1eac7ad8-caec-4eb0-9aaa-0034271058cf"},"output":{"0":{"data":{"text/plain":"(array([[1., 1., 1.],\n        [1., 1., 1.]]), array([[2., 2., 2.],\n        [2., 2., 2.]]))"},"execution_count":4,"metadata":{},"output_type":"execute_result"}},"pos":82,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"b0129d","input":"rev = lambda x: x[::-1]\nprint(rev('Hello'))","kernel":"python3-ubuntu","metadata":{"id":"zfxKJdXUQPSR"},"output":{"0":{"name":"stdout","text":"olleH\n"}},"pos":69,"state":"done","type":"cell"}
{"cell_type":"code","id":"6735f6","input":"","metadata":{"id":"YNn1S-ErQPSL"},"pos":30,"state":"done","type":"cell"}
{"cell_type":"code","id":"90a0aa","input":"","pos":32,"state":"done","type":"cell"}
{"cell_type":"code","id":"e14508","input":"","metadata":{"id":"HCEAnMnDQPSH"},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","id":"e51fbe","input":"","metadata":{"id":"i1MZIEIAQPSO"},"pos":49,"state":"done","type":"cell"}
{"cell_type":"code","id":"e6be5a","input":"","metadata":{"id":"GjiFm6tdQPSH"},"pos":16,"state":"done","type":"cell"}
{"cell_type":"code","id":"ea2e6e","input":"","metadata":{"id":"NmcTzinvQPSI"},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","id":"f08541","input":"","metadata":{"id":"bfDfn7QqQPSP"},"pos":51,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"036eb7","input":"### For loops, while loops, and if statements \n\n","metadata":{"id":"jpaN8K_ZQPSM"},"pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"088de0","input":"Finnally, functions can have a \"return\" statement. This is what the function sends back to the place it was called. You can think of functions like black boxes where the parameters in the parentheses are the input and the return statement is the output. This output can be saved to a variable to be used later. We will redefine the add_numbers function from above using a return statement to show this off.","metadata":{"id":"G5DqQXXhQPSQ"},"pos":62,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"095278","input":"Below, we will import the numpy module and use a few of its functions to show off this power","metadata":{"id":"YMj1Q1Y1QPSS"},"pos":74,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0b8c9b","input":"The goal of this notebook is to provide students with knowledge of the fundamentals of python. We will take a more interactive approach than most class room settings and ask the students to do some research on their own then bring their learnings back here to share with the class. ","metadata":{"id":"_dO5QVgOQPR-"},"pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"17c506","input":"### Modules (Numpy and OpenCV)","metadata":{"id":"ZQzAmW9EQPSS"},"pos":72,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1c310a","input":"This can get quite annoying with longer variable names, so we can do the following","metadata":{"id":"AS_t_yXaQPSF"},"pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"279b0a","input":"Now, figure out how to `append` a new element to the end of the list. Maybe google \"how to append an element to a list python\"\n\nFinally change a value in the list to something new.\n","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2a64ac","input":"First, we want to get the url of a particular image\n\n","metadata":{"id":"4B9AUzneSXS_"},"pos":87,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"34f837","input":"Now, it's time to explore some computer vision with OpenCv! First, we will need to import the necessary packages!\n\n","metadata":{"id":"JujQopnTRGBc"},"pos":85,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"36e5d1","input":"Variables work by assigning a value to a specific word or string of characters. It can be done using the \"=\" sign. This assigns whatever is on the right the string of characters on the left. We'll go ahead and try assigning a few variables in the next block.","metadata":{"id":"-UGnaDpyQPR_"},"pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3acfc6","input":"### Variables","metadata":{"id":"Rapm-jaKQPR-"},"pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4c0827","input":"In the following section we will be covering modules. Above, we leaned about functions and the power that they have. Modules let us use functions that other people have created to solve problems that we commonly incounter. For example, if we find that we frequently have to get a random number, instead of coding it every time, you could just import a function that either you or someone else created in the past. Basically, modules and importing lets us have access to the work of many other coders, making it a very powerful tool.","metadata":{"id":"DoBzshOfQPSS"},"pos":73,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4c586b","input":"Whenever the computer sees the function being used, it automatically runs the code stored inside of that function.","metadata":{"id":"GTZ6ePf4QPSQ"},"pos":58,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"510de2","input":"Additionally, functions can take in one or multiple values to use in their code, as we can see below.","metadata":{"id":"7IdW6EBEQPSQ"},"pos":59,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"528ee2","input":"Make an array from my_array of all -3s:","metadata":{"id":"lSdXMubIQPST"},"pos":83,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"53755f","input":"Next, we will look at how to make a list run a specific number of times.","metadata":{"id":"oUJi_1qhQPSN"},"pos":36,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5f9c1a","input":"Additionally, we can use elif statements to add additional conditions to the structure.","metadata":{"id":"fRI3i4GtQPSO"},"pos":45,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"63b84b","input":"Next, we want to read the picture from the url and turn it into BGR format","metadata":{"id":"BrKh22Q0ScJh"},"pos":89,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6939c6","input":"You may notice that we have to call the function we need by placing it after the module connected by a dot\n\nBut many times, that is inconvenient and we can get around it like this","metadata":{"id":"3YhUswp6QPSY"},"pos":109,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"699480","input":"Functions act like variables but instead of storing a value, they store lines of code. Below we can see how a function is created and used.","metadata":{"id":"aemAHfB4QPSP"},"pos":55,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"72afa1","input":"Sometimes we want to update the value of one variable, so we can do this","metadata":{"id":"xzqzRMEfQPSF"},"pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"77dd47","input":"Create a few boolean variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.","metadata":{"id":"9FNdxSh_QPSH"},"pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"77ea2b","input":"Create a few string variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.","metadata":{"id":"bJHCwb51QPSG"},"pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"77f593","input":"Now for if statements. The if-elif-else statement is used to conditionally execute a statement or a block of statements. Conditions can be true or false, execute one thing when the condition is true, something else when the condition is false.","metadata":{"id":"bKSvGNMWQPSN"},"pos":41,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7cccc8","input":"Here, we rename it to np to make it more easily accessable\n\n","metadata":{"id":"To484kDEQPSS"},"pos":75,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7eb717","input":"Create a few float variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.","metadata":{"id":"rU_jfwkYQPSH"},"pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"80996f","input":"Numpy is a library which is coded outside of python, making it faster. It gives us access to better and more efficient lists\n\nWith it, we can make a list like this:","metadata":{"id":"TerJarLUQPSS"},"pos":77,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"85cf08","input":"Lists work similarly to the variables we created above but store multiple values. We'll cover the types metioned above then ask the students to try and create their own versions of them.\n","metadata":{"id":"M5cuEuaDQPSI"},"pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"87def6","input":"Find a built in module and use it here:","metadata":{"id":"eT8dgW5dQPSY"},"pos":107,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8bf03e","input":"Below, find your own image, display it, resize it to your choosing, make the image only green or red, and then rotate it!","metadata":{"id":"rdxAD41lTUNj"},"pos":97,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8cf509","input":"In the block below, create a function that takes in 2 numbers and returns True if the product of the numbers is positive and False in all other cases.","metadata":{"id":"jdhIClbLQPSR"},"pos":66,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8e1498","input":"time allows us to access the current time","metadata":{"id":"9KiSuvOdQPSX"},"pos":103,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"92df12","input":"In the block below, create a function that takes in a string and returns the string in reverse order. For example, if the input was \"Hello\" the output should be \"olleH\"\n\n","metadata":{"id":"xTdLtZ6oQPSR"},"pos":68,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"931e4a","input":"**TODO:** Below, create a list of your favorite colors. Then figure out how to add a new element to the end of the list. Finally change a value in the list to something new.\n","metadata":{"id":"cVoRoZXlQPSL"},"pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"94e478","input":"or like this:","metadata":{"id":"-pwjOYSVQPST"},"pos":79,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"975c76","input":"Now its your turn! You can either work on each of the following challenges in teams of 2 or walk through each one as a group. In any case, it is recommended to look at them at a high level together so that everyone understands the concepts in each section.","metadata":{"id":"FgNa_pDHQPSR"},"pos":65,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"989f0f","input":"random allows us to get random numbers","metadata":{"id":"Nj_EQDY1QPSY"},"pos":105,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e933f","input":"Finally, let's try and rotate this image!","metadata":{"id":"fLNqTYnHTLMF"},"pos":95,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"aa5ba9","input":"Now, let's try to cast an image to only blue! cv2.split splits an image to 3 channels of pattern: blue, green, red","metadata":{"id":"_ZB7mlZ1S6FY"},"pos":93,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ac48e3","input":"There are tons of different types of variables we can make. For this next section, we will ask the students to go out and figure out how to create the following types of variable: strings, floats and booleans. Once you have created these variables, try the same operations we used above and see what they do.","metadata":{"id":"-2QKfa4lQPSG"},"pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b1c8b6","input":"In the next block, create a for loop that counts from 0 to 10 and prints out each number. Additionally, if the number is less than 3, print out \"This is a small number\".","metadata":{"id":"RcbZ9NNyQPSO"},"pos":48,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b7bba7","input":"We can add else statements to the above. An else statement is what will be run if the original statement is false.","metadata":{"id":"S7M1Iq_5QPSO"},"pos":43,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b97f48","input":"To access a specific item from the list, you would do the following.","metadata":{"id":"gkNke1agQPSI"},"pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bbec5f","input":"In the block below, we will make a while loop that runs 5 times. For while loops, we can't specify how long they will run for ahead of time so its important for us to create an achievable exit condition. An exit condition is just the condition that will cause the code to stop running. This is checked every time, immediatly before the code runs or reruns. We want to make sure that this condition will eventually happen, otherwise the code will run until something crashes or we manually close it","metadata":{"id":"DpD_UkYBQPSN"},"pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c2e9a8","input":"# Python Basics","metadata":{"id":"0ExiI3s_QPR7"},"pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cb2bd1","input":"We can also perform basic algebra to these variables and save the output to a new variable","metadata":{"id":"kMi8ltKcQPSB"},"pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d0e6fc","input":"Just like regular variables, we can do opperations on this list","metadata":{"id":"Oj3NxYvIQPST"},"pos":81,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d1a958","input":"If you are coding this on your own, you may need to install packages like numpy or OpenCV, which we will get into later, but there are many built in packages as well","metadata":{"id":"AfyUKmPmQPSX"},"pos":102,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d9a40f","input":"In the block below, create a function that takes in a list and prints out each element 1 at a time. For example, if the input was ['Dog', 'Cat', 'Hamster'], the output should be\n\nDog\n\nCat\n\nHamster\n\n","metadata":{"id":"RHk-3utjQPSR"},"pos":70,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dfb1d5","input":"In the next block, create a while loop that prints out all of the even numbers between 1 and 10. Additionally, if the number is between 5 and 9, print the number out a second time.","metadata":{"id":"Ya1WOHEYQPSP"},"pos":50,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dfd238","input":"Now its your turn. Either break up into 3 teams and have each team solve one of the blocks or solve them all together.","metadata":{"id":"wjW9z8CRQPSO"},"pos":47,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e46040","input":"In the next block, ask the user to input 3 items and add them all to a list. Then. create a loop that prints out each item that the user entered.","metadata":{"id":"_HlQPTo3QPSP"},"pos":52,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e7b55f","input":"finally, as we did with the numpy module, we can rename the function","metadata":{"id":"H36mITafQPSZ"},"pos":111,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"eb87a5","input":"We will learn more about for loops in the next lesson. For now, we will use them to go through a list and print out each element.","metadata":{"id":"SwBpJqbpQPSM"},"pos":34,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"efbb56","input":"First up, lists. you can create a list with the following code.","metadata":{"id":"e8GIOzZJQPSI"},"pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f27700","input":"Next, we'll take a look at while loops. In general, you can make a while loop do anything that a for loop can do but with slightly different syntax, so if you find youself understanding while loops better than for loops, you can just focus on using while loops. ","metadata":{"id":"Del5jaQ2QPSN"},"pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f70edc","input":"Our image is a little too large, let's resize it!","metadata":{"id":"Cp_0BoQ4SkMt"},"pos":91,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f7ce5f","input":"### Functions","metadata":{"id":"o-mm3dAcQPSP"},"pos":54,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f8f524","input":"### Lists, Dictionaries, and Tuples\n\n","metadata":{"id":"7di_vtlyQPSI"},"pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f95151","input":"The first element in the list is at index 0, then the second element is at index 1 and so on.\n\n","metadata":{"id":"GL-XB9INQPSJ"},"pos":27,"state":"done","type":"cell"}
{"id":0,"time":1656352234088,"type":"user"}
{"last_load":1656350572341,"type":"file"}